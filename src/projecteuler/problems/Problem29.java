package projecteuler.problems;

import java.math.BigInteger;
import java.util.HashMap;
import java.util.Map;


/**
 *
 * @author Branimir
 */
public class Problem29 implements ProjectEulerProblem {

    public Problem29() {
    }

    @Override
    public String description() {
        return "Problem 29: Distinct powers\n"
                + "Consider all integer combinations of ab for 2 ≤ a ≤ 5 and 2 ≤ b ≤ 5:\n" +
"\n" +
"    22=4, 23=8, 24=16, 25=32\n" +
"    32=9, 33=27, 34=81, 35=243\n" +
"    42=16, 43=64, 44=256, 45=1024\n" +
"    52=25, 53=125, 54=625, 55=3125\n" +
"\n" +
"If they are then placed in numerical order, with any repeats removed, we get the following sequence of 15 distinct terms:\n" +
"\n" +
"4, 8, 9, 16, 25, 27, 32, 64, 81, 125, 243, 256, 625, 1024, 3125\n" +
"\n" +
"How many distinct terms are in the sequence generated by ab for 2 ≤ a ≤ 100 and 2 ≤ b ≤ 100?";
    }

    @Override
    public String solve() {
        int solution = 0;
        Map<BigInteger, BigInteger> map = new HashMap();
        BigInteger n;
        for(int i = 2; i <= 100; i++) {
            for(int j = 2; j <= 100; j++) {
                n = BigInteger.ONE;
                for(int k = 0; k < j; k++) n = n.multiply(BigInteger.valueOf(i));
                if(!map.containsKey(n))
                    map.put(n, n);
            }
        }
        solution = map.size();
        return String.valueOf(solution);
    }
}
